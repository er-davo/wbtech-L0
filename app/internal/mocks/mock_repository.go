// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/extended_order_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/extended_order_repository.go -destination=internal/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "test-task/internal/models"
	repository "test-task/internal/repository"

	gomock "go.uber.org/mock/gomock"
)

// MockExtendedOrderRepository is a mock of ExtendedOrderRepository interface.
type MockExtendedOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockExtendedOrderRepositoryMockRecorder is the mock recorder for MockExtendedOrderRepository.
type MockExtendedOrderRepositoryMockRecorder struct {
	mock *MockExtendedOrderRepository
}

// NewMockExtendedOrderRepository creates a new mock instance.
func NewMockExtendedOrderRepository(ctrl *gomock.Controller) *MockExtendedOrderRepository {
	mock := &MockExtendedOrderRepository{ctrl: ctrl}
	mock.recorder = &MockExtendedOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedOrderRepository) EXPECT() *MockExtendedOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateExtendedOrder mocks base method.
func (m *MockExtendedOrderRepository) CreateExtendedOrder(ctx context.Context, eo *models.ExtendedOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtendedOrder", ctx, eo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExtendedOrder indicates an expected call of CreateExtendedOrder.
func (mr *MockExtendedOrderRepositoryMockRecorder) CreateExtendedOrder(ctx, eo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtendedOrder", reflect.TypeOf((*MockExtendedOrderRepository)(nil).CreateExtendedOrder), ctx, eo)
}

// Delivery mocks base method.
func (m *MockExtendedOrderRepository) Delivery() repository.DeliveryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delivery")
	ret0, _ := ret[0].(repository.DeliveryRepository)
	return ret0
}

// Delivery indicates an expected call of Delivery.
func (mr *MockExtendedOrderRepositoryMockRecorder) Delivery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delivery", reflect.TypeOf((*MockExtendedOrderRepository)(nil).Delivery))
}

// GetExtendedOrder mocks base method.
func (m *MockExtendedOrderRepository) GetExtendedOrder(ctx context.Context, id int) (*models.ExtendedOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtendedOrder", ctx, id)
	ret0, _ := ret[0].(*models.ExtendedOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtendedOrder indicates an expected call of GetExtendedOrder.
func (mr *MockExtendedOrderRepositoryMockRecorder) GetExtendedOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendedOrder", reflect.TypeOf((*MockExtendedOrderRepository)(nil).GetExtendedOrder), ctx, id)
}

// GetLastExtendedOrders mocks base method.
func (m *MockExtendedOrderRepository) GetLastExtendedOrders(ctx context.Context, limit int) ([]*models.ExtendedOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastExtendedOrders", ctx, limit)
	ret0, _ := ret[0].([]*models.ExtendedOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastExtendedOrders indicates an expected call of GetLastExtendedOrders.
func (mr *MockExtendedOrderRepositoryMockRecorder) GetLastExtendedOrders(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastExtendedOrders", reflect.TypeOf((*MockExtendedOrderRepository)(nil).GetLastExtendedOrders), ctx, limit)
}

// Items mocks base method.
func (m *MockExtendedOrderRepository) Items() repository.ItemsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Items")
	ret0, _ := ret[0].(repository.ItemsRepository)
	return ret0
}

// Items indicates an expected call of Items.
func (mr *MockExtendedOrderRepositoryMockRecorder) Items() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockExtendedOrderRepository)(nil).Items))
}

// Orders mocks base method.
func (m *MockExtendedOrderRepository) Orders() repository.OrdersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders")
	ret0, _ := ret[0].(repository.OrdersRepository)
	return ret0
}

// Orders indicates an expected call of Orders.
func (mr *MockExtendedOrderRepositoryMockRecorder) Orders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockExtendedOrderRepository)(nil).Orders))
}

// Payment mocks base method.
func (m *MockExtendedOrderRepository) Payment() repository.PaymentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment")
	ret0, _ := ret[0].(repository.PaymentRepository)
	return ret0
}

// Payment indicates an expected call of Payment.
func (mr *MockExtendedOrderRepositoryMockRecorder) Payment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockExtendedOrderRepository)(nil).Payment))
}
